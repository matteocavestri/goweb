package components

templ Examples() {
	<main class="max-w-4xl w-full space-y-12 p-4 sm:p-8">
		<header class="text-center">
			<h1 class="text-4xl font-bold mb-2"><span class="text-yellow-500">GOAT</span> Stack Examples</h1>
			<p class="text-lg mb-6 max-w-xl mx-auto">Explore the power of Go templates with Alpine.js and Tailwind CSS</p>
		</header>
		<section class="space-y-8">
			<h2 class="text-2xl font-semibold mb-4">Button Component</h2>
			<div class="border border-current p-6 rounded-lg space-x-4">
				@Button("Primary", "bg-yellow-500 text-white", templ.Attributes{"type": "submit"})
				@Button("Secondary", "bg-stone-200 text-stone-800 dark:bg-stone-700 dark:text-white", templ.Attributes{"type": "button"})
				@Button("Outline", "border border-stone-800 text-stone-800 dark:border-stone-200 dark:text-stone-200", templ.Attributes{"type": "button"})
			</div>
			@CodeBlock(buttonCode)
		</section>
		<section class="space-y-8">
			<h2 class="text-2xl font-semibold mb-4">Toggle Switch</h2>
			<div class="border border-current p-6 rounded-lg">
				@ToggleSwitch("Toggle Me")
			</div>
			@CodeBlock(toggleSwitchCode)
		</section>
		<section class="space-y-8">
			<h2 class="text-2xl font-semibold mb-4">Counter</h2>
			<div class="border border-current p-6 rounded-lg">
				@Counter()
			</div>
			@CodeBlock(counterCode)
		</section>
		<section class="space-y-8">
			<h2 class="text-2xl font-semibold mb-4">Modal Dialog</h2>
			<div class="border border-current p-6 rounded-lg">
				@Modal("Open Modal", "Modal Title", "This is the modal content.")
			</div>
			@CodeBlock(modalCode)
		</section>
	</main>
}

templ Button(text string, classes string, attrs templ.Attributes) {
	<button { attrs... } class={ "px-4 py-2 rounded hover:opacity-80 transition duration-300 " + classes }>{ text }</button>
}

templ ToggleSwitch(label string) {
	<div x-data="{ isOn: false }" class="flex items-center space-x-4">
		<span class="text-sm font-medium text-stone-900 dark:text-stone-300">{ label }</span>
		<button
			@click="isOn = !isOn"
			:class="isOn ? 'bg-yellow-500' : 'bg-stone-200'"
			class="relative inline-flex h-6 w-11 flex-shrink-0 
            cursor-pointer rounded-full border-2 border-transparent 
            transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2"
		>
			<span
				:class="isOn ? 'translate-x-5' : 'translate-x-0'"
				class="pointer-events-none inline-block h-5 w-5 transform rounded-full bg-stone-50 dark:bg-stone-800
                shadow ring-0 transition duration-200 ease-in-out"
			></span>
		</button>
		<span x-text="isOn ? 'ON' : 'OFF'" class="text-sm font-medium text-stone-900 dark:text-stone-300"></span>
	</div>
}

templ Counter() {
	<div x-data="{ count: 0 }" class="text-center">
		<p class="text-2xl font-bold mb-4">Count: <span x-text="count"></span></p>
		<div class="space-x-2">
			@Button("Increment", "bg-yellow-500 text-white", templ.Attributes{"@click": "count++", "type": "submit"})
			@Button("Decrement", "bg-stone-200 text-stone-800 dark:bg-stone-700 dark:text-white", templ.Attributes{"@click": "count--", "type": "button"})
		</div>
	</div>
}

templ Modal(buttonText, title, content string) {
	<div x-data="{ isOpen: false }">
		<button
			@click="isOpen = true"
			class="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600 transition duration-300"
		>{ buttonText }</button>
		<div x-show="isOpen" class="fixed z-10 inset-0 bg-black bg-opacity-50 flex items-center justify-center" style="display: none;">
			<div class="bg-white dark:bg-stone-800 p-6 rounded-lg shadow-lg">
				<h3 class="text-lg font-semibold mb-2">{ title }</h3>
				<p class="mb-4">{ content }</p>
				<button
					@click="isOpen = false"
					class="bg-gray-300 text-gray-800 px-4 py-2 rounded hover:bg-gray-400 transition duration-300"
				>Close</button>
			</div>
		</div>
	</div>
}

templ CodeBlock(code string) {
	<div class="relative group">
		<pre class="bg-stone-100 dark:bg-stone-800 p-4 rounded-md overflow-x-auto">
			<code class="language-go text-yellow-500">{ code }</code>
		</pre>
		@CopyButton(code)
	</div>
}

templ CopyButton(code string) {
	<button
		x-data="{ copied: false }"
		@click={ "navigator.clipboard.writeText(`" + code + "`); copied = true; setTimeout(() => copied = false, 2000)" }
		class="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity 
        duration-200 bg-stone-200 dark:bg-stone-700 p-1 rounded-md cursor-pointer "
		:aria-label="copied ? 'Copied!' : 'Copy to clipboard'"
	>
		<span x-show="!copied">
			@IconCopy()
		</span>
		<span x-show="copied" class="text-green-500">âœ“</span>
	</button>
}

const (
	buttonCode = `templ Button(text string, classes string) {
    <button class={ "px-4 py-2 rounded hover:opacity-80 transition duration-300 " + classes }>{ text }</button>
}

// Usage in another template:
@Button("Primary", "bg-blue-500 text-white")
@Button("Secondary", "bg-gray-200 text-gray-800")
@Button("Outline", "border border-gray-300 text-gray-700")`

	toggleSwitchCode = `templ ToggleSwitch(label string) {
    <div x-data="{ isOn: false }" class="flex items-center space-x-4">
        <span class="text-sm font-medium text-gray-900 dark:text-gray-300">{ label }</span>
        <button 
            @click="isOn = !isOn" 
            :class="isOn ? 'bg-blue-600' : 'bg-gray-200'"
            class="relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
            <span 
                :class="isOn ? 'translate-x-5' : 'translate-x-0'"
                class="pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out"
            ></span>
        </button>
        <span x-text="isOn ? 'ON' : 'OFF'" class="text-sm font-medium text-gray-900 dark:text-gray-300"></span>
    </div>
}

// Usage in another template:
@ToggleSwitch("Toggle Me")`

	counterCode = `templ Counter() {
    <div x-data="{ count: 0 }" class="text-center">
        <p class="text-2xl font-bold mb-4">Count: <span x-text="count"></span></p>
        <div class="space-x-2">
            <button @click="count++" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition duration-300">Increment</button>
            <button @click="count--" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition duration-300">Decrement</button>
        </div>
    </div>
}

// Usage in another template:
@Counter()`

	modalCode = `templ Modal(buttonText, title, content string) {
    <div x-data="{ isOpen: false }">
        <button @click="isOpen = true" class="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 transition duration-300">{ buttonText }</button>
        
        <div x-show="isOpen" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center" style="display: none;">
            <div class="bg-white p-6 rounded-lg shadow-lg">
                <h3 class="text-lg font-semibold mb-2">{ title }</h3>
                <p class="mb-4">{ content }</p>
                <button @click="isOpen = false" class="bg-gray-300 text-gray-800 px-4 py-2 rounded hover:bg-gray-400 transition duration-300">Close</button>
            </div>
        </div>
    </div>
}

// Usage in another template:
@Modal("Open Modal", "Modal Title", "This is the modal content.")`
)
